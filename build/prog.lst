
build/prog.elf:     file format elf32-littleriscv


Disassembly of section .text:

0800015c <_Z5_initv>:
extern void (*__fini_array_start []) (void) __attribute__((weak)); //from linker destructors
extern void (*__fini_array_end []) (void) __attribute__((weak)); //from linker	destructors
// dummy This section holds executable instructions that contribute to the process initialization code. When a program
// starts to run, the system arranges to execute the code in this section before calling the main program entry point
// (called main for C programs).
void __attribute__ ((weak)) _init(void)  {}
 800015c:	1141                	addi	sp,sp,-16
 800015e:	c622                	sw	s0,12(sp)
 8000160:	0800                	addi	s0,sp,16
 8000162:	0001                	nop
 8000164:	4432                	lw	s0,12(sp)
 8000166:	0141                	addi	sp,sp,16
 8000168:	8082                	ret

0800016a <_Z5_finiv>:
// dummy This section holds executable instructions that contribute to the process termination code. That is,
// when a program exits normally, the system arranges to execute the code in this section
void __attribute__ ((weak)) _fini(void)  {} 
 800016a:	1141                	addi	sp,sp,-16
 800016c:	c622                	sw	s0,12(sp)
 800016e:	0800                	addi	s0,sp,16
 8000170:	0001                	nop
 8000172:	4432                	lw	s0,12(sp)
 8000174:	0141                	addi	sp,sp,16
 8000176:	8082                	ret

08000178 <__libc_init_array>:

/* Iterate over all the init routines.  */
// static initialization constructors function
extern "C" void __libc_init_array(void) {
 8000178:	1101                	addi	sp,sp,-32
 800017a:	ce06                	sw	ra,28(sp)
 800017c:	cc22                	sw	s0,24(sp)
 800017e:	1000                	addi	s0,sp,32
    int count;
    int i;
    count = __preinit_array_end - __preinit_array_start; // counts of preinit functions DK what it is
 8000180:	000007b7          	lui	a5,0x0
 8000184:	00078713          	mv	a4,a5
 8000188:	080007b7          	lui	a5,0x8000
 800018c:	61878793          	addi	a5,a5,1560 # 8000618 <__init_array_start>
 8000190:	40f707b3          	sub	a5,a4,a5
 8000194:	8789                	srai	a5,a5,0x2
 8000196:	fef42423          	sw	a5,-24(s0)
    for (i = 0; i < count; i++)
 800019a:	fe042623          	sw	zero,-20(s0)
 800019e:	fec42703          	lw	a4,-20(s0)
 80001a2:	fe842783          	lw	a5,-24(s0)
 80001a6:	02f75263          	bge	a4,a5,80001ca <__libc_init_array+0x52>
        __preinit_array_start[i]();
 80001aa:	080007b7          	lui	a5,0x8000
 80001ae:	61878713          	addi	a4,a5,1560 # 8000618 <__init_array_start>
 80001b2:	fec42783          	lw	a5,-20(s0)
 80001b6:	078a                	slli	a5,a5,0x2
 80001b8:	97ba                	add	a5,a5,a4
 80001ba:	439c                	lw	a5,0(a5)
 80001bc:	9782                	jalr	a5
    for (i = 0; i < count; i++)
 80001be:	fec42783          	lw	a5,-20(s0)
 80001c2:	0785                	addi	a5,a5,1
 80001c4:	fef42623          	sw	a5,-20(s0)
 80001c8:	bfd9                	j	800019e <__libc_init_array+0x26>
    _init();
 80001ca:	3f49                	jal	800015c <_Z5_initv>
    count = __init_array_end - __init_array_start; // counts of init constructors
 80001cc:	080007b7          	lui	a5,0x8000
 80001d0:	61c78713          	addi	a4,a5,1564 # 800061c <__fini_array_end>
 80001d4:	080007b7          	lui	a5,0x8000
 80001d8:	61878793          	addi	a5,a5,1560 # 8000618 <__init_array_start>
 80001dc:	40f707b3          	sub	a5,a4,a5
 80001e0:	8789                	srai	a5,a5,0x2
 80001e2:	fef42423          	sw	a5,-24(s0)
    for (i = 0; i < count; i++)
 80001e6:	fe042623          	sw	zero,-20(s0)
 80001ea:	fec42703          	lw	a4,-20(s0)
 80001ee:	fe842783          	lw	a5,-24(s0)
 80001f2:	02f75263          	bge	a4,a5,8000216 <__libc_init_array+0x9e>
        __init_array_start[i]();
 80001f6:	080007b7          	lui	a5,0x8000
 80001fa:	61878713          	addi	a4,a5,1560 # 8000618 <__init_array_start>
 80001fe:	fec42783          	lw	a5,-20(s0)
 8000202:	078a                	slli	a5,a5,0x2
 8000204:	97ba                	add	a5,a5,a4
 8000206:	439c                	lw	a5,0(a5)
 8000208:	9782                	jalr	a5
    for (i = 0; i < count; i++)
 800020a:	fec42783          	lw	a5,-20(s0)
 800020e:	0785                	addi	a5,a5,1
 8000210:	fef42623          	sw	a5,-20(s0)
 8000214:	bfd9                	j	80001ea <__libc_init_array+0x72>
}
 8000216:	0001                	nop
 8000218:	40f2                	lw	ra,28(sp)
 800021a:	4462                	lw	s0,24(sp)
 800021c:	6105                	addi	sp,sp,32
 800021e:	8082                	ret

08000220 <__libc_fini_array>:
/* Run all the cleanup routines.  */
//!< destructors not usefull in microcontrollers
extern "C" void __libc_fini_array(void) {
 8000220:	1101                	addi	sp,sp,-32
 8000222:	ce06                	sw	ra,28(sp)
 8000224:	cc22                	sw	s0,24(sp)
 8000226:	1000                	addi	s0,sp,32
    int count;
    int i;
    count = __fini_array_end - __fini_array_start;
 8000228:	080007b7          	lui	a5,0x8000
 800022c:	61c78713          	addi	a4,a5,1564 # 800061c <__fini_array_end>
 8000230:	080007b7          	lui	a5,0x8000
 8000234:	61c78793          	addi	a5,a5,1564 # 800061c <__fini_array_end>
 8000238:	40f707b3          	sub	a5,a4,a5
 800023c:	8789                	srai	a5,a5,0x2
 800023e:	fef42423          	sw	a5,-24(s0)
    for (i = count; i > 0; i--)
 8000242:	fe842783          	lw	a5,-24(s0)
 8000246:	fef42623          	sw	a5,-20(s0)
 800024a:	fec42783          	lw	a5,-20(s0)
 800024e:	02f05363          	blez	a5,8000274 <__libc_fini_array+0x54>
        __fini_array_start[i - 1]();
 8000252:	fec42783          	lw	a5,-20(s0)
 8000256:	17fd                	addi	a5,a5,-1
 8000258:	08000737          	lui	a4,0x8000
 800025c:	61c70713          	addi	a4,a4,1564 # 800061c <__fini_array_end>
 8000260:	078a                	slli	a5,a5,0x2
 8000262:	97ba                	add	a5,a5,a4
 8000264:	439c                	lw	a5,0(a5)
 8000266:	9782                	jalr	a5
    for (i = count; i > 0; i--)
 8000268:	fec42783          	lw	a5,-20(s0)
 800026c:	17fd                	addi	a5,a5,-1
 800026e:	fef42623          	sw	a5,-20(s0)
 8000272:	bfe1                	j	800024a <__libc_fini_array+0x2a>
    _fini();
 8000274:	3ddd                	jal	800016a <_Z5_finiv>
}
 8000276:	0001                	nop
 8000278:	40f2                	lw	ra,28(sp)
 800027a:	4462                	lw	s0,24(sp)
 800027c:	6105                	addi	sp,sp,32
 800027e:	8082                	ret

08000280 <Reset_Handler>:
extern void *_sidata, *_sdata, *_edata, *_sbss, *_ebss; //из линкер скрипта
extern "C" void __attribute__((naked,noreturn)) Reset_Handler() {
    // jump to 0x0800xxxx address field from 0x0000xxxx address field
    asm("la a0, 0x08000000 \n"
         "addi a0, a0, 0x28a \n"
         "jr a0");
 8000280:	08000537          	lui	a0,0x8000
 8000284:	28a50513          	addi	a0,a0,650 # 800028a <Reset_Handler+0xa>
 8000288:	8502                	jr	a0
    // check if PC == 0x0800xxxx     
    asm("la s0, _estack \n" 
        "la s1, 0x20000800 \n"
        "bne s0, s1, Reset_Handler");
 800028a:	18000417          	auipc	s0,0x18000
 800028e:	57640413          	addi	s0,s0,1398 # 20000800 <_StackLimit>
 8000292:	200014b7          	lui	s1,0x20001
 8000296:	80048493          	addi	s1,s1,-2048 # 20000800 <_StackLimit>
 800029a:	fe9413e3          	bne	s0,s1,8000280 <Reset_Handler>
    asm("mv sp, s1"); // set stack ptr
 800029e:	8126                	mv	sp,s1
    asm("csrc 0x300, 8"); // disable interrupts
 80002a0:	30047073          	csrci	mstatus,8
    /* Intial the mtvt*/
    asm(".equ CSR_MTVT,  0x307 \n   "
        //"la t0, Vectors-4 \n      "
        "lui t0, 0x08000 \n"
        "csrw CSR_MTVT, t0          ");
 80002a4:	080002b7          	lui	t0,0x8000
 80002a8:	30729073          	csrw	mtvt,t0
    __libc_init_array(); 
 80002ac:	35f1                	jal	8000178 <__libc_init_array>
    main();
 80002ae:	2031                	jal	80002ba <main>
}
 80002b0:	0001                	nop

080002b2 <Default_Handler>:
extern "C" void Default_Handler() {
 80002b2:	1141                	addi	sp,sp,-16
 80002b4:	c622                	sw	s0,12(sp)
 80002b6:	0800                	addi	s0,sp,16
     while(1) {
 80002b8:	a001                	j	80002b8 <Default_Handler+0x6>

080002ba <main>:
#include "uart0.h"

void gpioInit();
void delay(volatile uint32_t val);
Uart0 uart;
int main() {
 80002ba:	1101                	addi	sp,sp,-32
 80002bc:	ce06                	sw	ra,28(sp)
 80002be:	cc22                	sw	s0,24(sp)
 80002c0:	1000                	addi	s0,sp,32
    int i = -7;
 80002c2:	57e5                	li	a5,-7
 80002c4:	fef42423          	sw	a5,-24(s0)
    
    gpioInit();   
 80002c8:	2085                	jal	8000328 <_Z8gpioInitv>
    GPIOC->BSRR |= (1<<29);
 80002ca:	400117b7          	lui	a5,0x40011
 80002ce:	4b94                	lw	a3,16(a5)
 80002d0:	400117b7          	lui	a5,0x40011
 80002d4:	20000737          	lui	a4,0x20000
 80002d8:	8f55                	or	a4,a4,a3
 80002da:	cb98                	sw	a4,16(a5)
    GPIOC->BSRR |= (1<<13);
 80002dc:	400117b7          	lui	a5,0x40011
 80002e0:	4b94                	lw	a3,16(a5)
 80002e2:	400117b7          	lui	a5,0x40011
 80002e6:	6709                	lui	a4,0x2
 80002e8:	8f55                	or	a4,a4,a3
 80002ea:	cb98                	sw	a4,16(a5)
    GPIOC->BSRR |= (1<<29);
 80002ec:	400117b7          	lui	a5,0x40011
 80002f0:	4b94                	lw	a3,16(a5)
 80002f2:	400117b7          	lui	a5,0x40011
 80002f6:	20000737          	lui	a4,0x20000
 80002fa:	8f55                	or	a4,a4,a3
 80002fc:	cb98                	sw	a4,16(a5)
    uint8_t count = 0x30;
 80002fe:	03000793          	li	a5,48
 8000302:	fef407a3          	sb	a5,-17(s0)
    while (1) {
        //uart.sendByte(count++);        
        if(count == 0x50) {
 8000306:	fef44703          	lbu	a4,-17(s0)
 800030a:	05000793          	li	a5,80
 800030e:	00f71463          	bne	a4,a5,8000316 <main+0x5c>
            count = 0;
 8000312:	fe0407a3          	sb	zero,-17(s0)
        //GPIOC->BSRR |= (1<<29);
        //delay(500000);
        //GPIOC->BSRR |= (1<<13);
        //delay(1000000);
         //GPIOC->ODR |= (1<<13);
         delay(50000);
 8000316:	67b1                	lui	a5,0xc
 8000318:	35078513          	addi	a0,a5,848 # c350 <__stack_size+0xbb50>
 800031c:	2881                	jal	800036c <_Z5delaym>
         //GPIOC->ODR &=~ (1<<13);
         delay(50000);
 800031e:	67b1                	lui	a5,0xc
 8000320:	35078513          	addi	a0,a5,848 # c350 <__stack_size+0xbb50>
 8000324:	20a1                	jal	800036c <_Z5delaym>
        if(count == 0x50) {
 8000326:	b7c5                	j	8000306 <main+0x4c>

08000328 <_Z8gpioInitv>:
    }
    return 0;
}

void gpioInit() {
 8000328:	1141                	addi	sp,sp,-16
 800032a:	c622                	sw	s0,12(sp)
 800032c:	0800                	addi	s0,sp,16
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 800032e:	400217b7          	lui	a5,0x40021
 8000332:	4f98                	lw	a4,24(a5)
 8000334:	400217b7          	lui	a5,0x40021
 8000338:	01076713          	ori	a4,a4,16
 800033c:	cf98                	sw	a4,24(a5)
    GPIOC->CRH &=~ GPIO_CRH_CNF13;
 800033e:	400117b7          	lui	a5,0x40011
 8000342:	43d4                	lw	a3,4(a5)
 8000344:	400117b7          	lui	a5,0x40011
 8000348:	ff400737          	lui	a4,0xff400
 800034c:	177d                	addi	a4,a4,-1
 800034e:	8f75                	and	a4,a4,a3
 8000350:	c3d8                	sw	a4,4(a5)
    GPIOC->CRH |= GPIO_CRH_MODE13; //00:11 GPIO output max speed
 8000352:	400117b7          	lui	a5,0x40011
 8000356:	43d4                	lw	a3,4(a5)
 8000358:	400117b7          	lui	a5,0x40011
 800035c:	00300737          	lui	a4,0x300
 8000360:	8f55                	or	a4,a4,a3
 8000362:	c3d8                	sw	a4,4(a5)
}
 8000364:	0001                	nop
 8000366:	4432                	lw	s0,12(sp)
 8000368:	0141                	addi	sp,sp,16
 800036a:	8082                	ret

0800036c <_Z5delaym>:

void delay(volatile uint32_t val) {
 800036c:	1101                	addi	sp,sp,-32
 800036e:	ce22                	sw	s0,28(sp)
 8000370:	1000                	addi	s0,sp,32
 8000372:	fea42623          	sw	a0,-20(s0)
    while(val!=0) {
 8000376:	fec42783          	lw	a5,-20(s0)
 800037a:	00f037b3          	snez	a5,a5
 800037e:	0ff7f793          	andi	a5,a5,255
 8000382:	c799                	beqz	a5,8000390 <_Z5delaym+0x24>
        val--;
 8000384:	fec42783          	lw	a5,-20(s0)
 8000388:	17fd                	addi	a5,a5,-1
 800038a:	fef42623          	sw	a5,-20(s0)
    while(val!=0) {
 800038e:	b7e5                	j	8000376 <_Z5delaym+0xa>
    }
}
 8000390:	0001                	nop
 8000392:	4472                	lw	s0,28(sp)
 8000394:	6105                	addi	sp,sp,32
 8000396:	8082                	ret

08000398 <USART0_IRQn_handler>:

extern "C" void USART0_IRQn_handler() {
 8000398:	1101                	addi	sp,sp,-32
 800039a:	ce22                	sw	s0,28(sp)
 800039c:	1000                	addi	s0,sp,32
    // GPIOC->ODR |= (1 << 13);
    // delay(100000);
    // GPIOC->ODR &= ~(1 << 13);
    // delay(100000);
    //USART0->STAT &=~ USART_STAT_RBNE;
    GPIOC->ODR ^= (1<<13);
 800039e:	400117b7          	lui	a5,0x40011
 80003a2:	47d4                	lw	a3,12(a5)
 80003a4:	400117b7          	lui	a5,0x40011
 80003a8:	6709                	lui	a4,0x2
 80003aa:	8f35                	xor	a4,a4,a3
 80003ac:	c7d8                	sw	a4,12(a5)
    uint8_t byte = USART0->DATA;
 80003ae:	400147b7          	lui	a5,0x40014
 80003b2:	80078793          	addi	a5,a5,-2048 # 40013800 <_ZN5Uart05pThisE+0x20012ffc>
 80003b6:	43dc                	lw	a5,4(a5)
 80003b8:	fef407a3          	sb	a5,-17(s0)
    //  Uart0::pThis->sendByte('O');
    //  Uart0::pThis->sendByte('P');
    //  Uart0::pThis->sendByte('A');
 80003bc:	0001                	nop
 80003be:	4472                	lw	s0,28(sp)
 80003c0:	6105                	addi	sp,sp,32
 80003c2:	8082                	ret

080003c4 <_Z41__static_initialization_and_destruction_0ii>:
 80003c4:	1101                	addi	sp,sp,-32
 80003c6:	ce06                	sw	ra,28(sp)
 80003c8:	cc22                	sw	s0,24(sp)
 80003ca:	1000                	addi	s0,sp,32
 80003cc:	fea42623          	sw	a0,-20(s0)
 80003d0:	feb42423          	sw	a1,-24(s0)
 80003d4:	fec42703          	lw	a4,-20(s0)
 80003d8:	4785                	li	a5,1
 80003da:	00f71d63          	bne	a4,a5,80003f4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80003de:	fe842703          	lw	a4,-24(s0)
 80003e2:	67c1                	lui	a5,0x10
 80003e4:	17fd                	addi	a5,a5,-1
 80003e6:	00f71763          	bne	a4,a5,80003f4 <_Z41__static_initialization_and_destruction_0ii+0x30>
Uart0 uart;
 80003ea:	200017b7          	lui	a5,0x20001
 80003ee:	80078513          	addi	a0,a5,-2048 # 20000800 <_StackLimit>
 80003f2:	285d                	jal	80004a8 <_ZN5Uart0C1Ev>
 80003f4:	0001                	nop
 80003f6:	40f2                	lw	ra,28(sp)
 80003f8:	4462                	lw	s0,24(sp)
 80003fa:	6105                	addi	sp,sp,32
 80003fc:	8082                	ret

080003fe <_GLOBAL__sub_I_uart>:
 80003fe:	1141                	addi	sp,sp,-16
 8000400:	c606                	sw	ra,12(sp)
 8000402:	c422                	sw	s0,8(sp)
 8000404:	0800                	addi	s0,sp,16
 8000406:	67c1                	lui	a5,0x10
 8000408:	fff78593          	addi	a1,a5,-1 # ffff <__stack_size+0xf7ff>
 800040c:	4505                	li	a0,1
 800040e:	3f5d                	jal	80003c4 <_Z41__static_initialization_and_destruction_0ii>
 8000410:	40b2                	lw	ra,12(sp)
 8000412:	4422                	lw	s0,8(sp)
 8000414:	0141                	addi	sp,sp,16
 8000416:	8082                	ret

08000418 <_Z10eclic_initv>:
constexpr uint8_t  ECLICINTCTLBITS = 0x4;

asm(".equ CSR_MSTATUS, 0x300 \n"
    ".equ CSR_MTVEC, 0x305 \n"
    ".equ MSTATUS_MIE, (1<<3) \n");
inline void eclic_init(){
 8000418:	1141                	addi	sp,sp,-16
 800041a:	c622                	sw	s0,12(sp)
 800041c:	0800                	addi	s0,sp,16
    asm("la t0,  CSR_MTVEC \n"
        "la t1, 0xFFFFFFC0 \n"
        "and t0, t0, t1    \n"
        "ori t0, t0, 3     \n"
        "csrw CSR_MTVEC, t0  # set eclic ");
 800041e:	30500293          	li	t0,773
 8000422:	fc000313          	li	t1,-64
 8000426:	0062f2b3          	and	t0,t0,t1
 800042a:	0032e293          	ori	t0,t0,3
 800042e:	30529073          	csrw	mtvec,t0
}
 8000432:	0001                	nop
 8000434:	4432                	lw	s0,12(sp)
 8000436:	0141                	addi	sp,sp,16
 8000438:	8082                	ret

0800043a <_Z15interruptEnablev>:
inline void interruptEnable() {
 800043a:	1141                	addi	sp,sp,-16
 800043c:	c622                	sw	s0,12(sp)
 800043e:	0800                	addi	s0,sp,16
    asm("csrrs zero, CSR_MSTATUS, MSTATUS_MIE");
 8000440:	30046073          	csrsi	mstatus,8
}
 8000444:	0001                	nop
 8000446:	4432                	lw	s0,12(sp)
 8000448:	0141                	addi	sp,sp,16
 800044a:	8082                	ret

0800044c <_Z22eclic_enable_interruptm>:
inline void eclic_enable_interrupt (uint32_t source) {
 800044c:	1101                	addi	sp,sp,-32
 800044e:	ce22                	sw	s0,28(sp)
 8000450:	1000                	addi	s0,sp,32
 8000452:	fea42623          	sw	a0,-20(s0)
    *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_IE_OFFSET+source*4) = 1;
 8000456:	fec42783          	lw	a5,-20(s0)
 800045a:	00279713          	slli	a4,a5,0x2
 800045e:	d20017b7          	lui	a5,0xd2001
 8000462:	0785                	addi	a5,a5,1
 8000464:	97ba                	add	a5,a5,a4
 8000466:	873e                	mv	a4,a5
 8000468:	4785                	li	a5,1
 800046a:	00f70023          	sb	a5,0(a4) # 2000 <__stack_size+0x1800>
}
 800046e:	0001                	nop
 8000470:	4472                	lw	s0,28(sp)
 8000472:	6105                	addi	sp,sp,32
 8000474:	8082                	ret

08000476 <_Z17eclic_set_intattrmh>:

inline uint8_t eclic_get_intctrl  (uint32_t source){
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4);
}

inline void eclic_set_intattr (uint32_t source, uint8_t intattr){
 8000476:	1101                	addi	sp,sp,-32
 8000478:	ce22                	sw	s0,28(sp)
 800047a:	1000                	addi	s0,sp,32
 800047c:	fea42623          	sw	a0,-20(s0)
 8000480:	87ae                	mv	a5,a1
 8000482:	fef405a3          	sb	a5,-21(s0)
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_ATTR_OFFSET+source*4) = intattr;
 8000486:	fec42783          	lw	a5,-20(s0)
 800048a:	00279713          	slli	a4,a5,0x2
 800048e:	d20017b7          	lui	a5,0xd2001
 8000492:	0789                	addi	a5,a5,2
 8000494:	97ba                	add	a5,a5,a4
 8000496:	873e                	mv	a4,a5
 8000498:	feb44783          	lbu	a5,-21(s0)
 800049c:	00f70023          	sb	a5,0(a4)
}
 80004a0:	0001                	nop
 80004a2:	4472                	lw	s0,28(sp)
 80004a4:	6105                	addi	sp,sp,32
 80004a6:	8082                	ret

080004a8 <_ZN5Uart0C1Ev>:
#include "uart0.h"

Uart0* Uart0::pThis = nullptr;

Uart0::Uart0() {
 80004a8:	1101                	addi	sp,sp,-32
 80004aa:	ce06                	sw	ra,28(sp)
 80004ac:	cc22                	sw	s0,24(sp)
 80004ae:	1000                	addi	s0,sp,32
 80004b0:	fea42623          	sw	a0,-20(s0)
    pThis = this;
 80004b4:	200017b7          	lui	a5,0x20001
 80004b8:	fec42703          	lw	a4,-20(s0)
 80004bc:	80e7a223          	sw	a4,-2044(a5) # 20000804 <_ZN5Uart05pThisE>
    init();
 80004c0:	fec42503          	lw	a0,-20(s0)
 80004c4:	205d                	jal	800056a <_ZN5Uart04initEv>
}
 80004c6:	0001                	nop
 80004c8:	40f2                	lw	ra,28(sp)
 80004ca:	4462                	lw	s0,24(sp)
 80004cc:	6105                	addi	sp,sp,32
 80004ce:	8082                	ret

080004d0 <_ZN5Uart08sendByteEh>:

void Uart0::sendByte(uint8_t byte) {
 80004d0:	1101                	addi	sp,sp,-32
 80004d2:	ce22                	sw	s0,28(sp)
 80004d4:	1000                	addi	s0,sp,32
 80004d6:	fea42623          	sw	a0,-20(s0)
 80004da:	87ae                	mv	a5,a1
 80004dc:	fef405a3          	sb	a5,-21(s0)
    while(!(USART0->STAT & USART_STAT_TBE)){}
 80004e0:	400147b7          	lui	a5,0x40014
 80004e4:	80078793          	addi	a5,a5,-2048 # 40013800 <_ZN5Uart05pThisE+0x20012ffc>
 80004e8:	439c                	lw	a5,0(a5)
 80004ea:	0807f793          	andi	a5,a5,128
 80004ee:	0017b793          	seqz	a5,a5
 80004f2:	0ff7f793          	andi	a5,a5,255
 80004f6:	c391                	beqz	a5,80004fa <_ZN5Uart08sendByteEh+0x2a>
 80004f8:	b7e5                	j	80004e0 <_ZN5Uart08sendByteEh+0x10>
    USART0->DATA = byte;
 80004fa:	400147b7          	lui	a5,0x40014
 80004fe:	80078793          	addi	a5,a5,-2048 # 40013800 <_ZN5Uart05pThisE+0x20012ffc>
 8000502:	feb44703          	lbu	a4,-21(s0)
 8000506:	c3d8                	sw	a4,4(a5)
    while(!(USART0->STAT & USART_STAT_TC)){}
 8000508:	400147b7          	lui	a5,0x40014
 800050c:	80078793          	addi	a5,a5,-2048 # 40013800 <_ZN5Uart05pThisE+0x20012ffc>
 8000510:	439c                	lw	a5,0(a5)
 8000512:	0407f793          	andi	a5,a5,64
 8000516:	0017b793          	seqz	a5,a5
 800051a:	0ff7f793          	andi	a5,a5,255
 800051e:	c391                	beqz	a5,8000522 <_ZN5Uart08sendByteEh+0x52>
 8000520:	b7e5                	j	8000508 <_ZN5Uart08sendByteEh+0x38>
}
 8000522:	0001                	nop
 8000524:	4472                	lw	s0,28(sp)
 8000526:	6105                	addi	sp,sp,32
 8000528:	8082                	ret

0800052a <_ZN5Uart07sendStrEPc>:
void Uart0::sendStr(char* str) {
 800052a:	1101                	addi	sp,sp,-32
 800052c:	ce06                	sw	ra,28(sp)
 800052e:	cc22                	sw	s0,24(sp)
 8000530:	1000                	addi	s0,sp,32
 8000532:	fea42623          	sw	a0,-20(s0)
 8000536:	feb42423          	sw	a1,-24(s0)
    while(*str!='\0') {
 800053a:	fe842783          	lw	a5,-24(s0)
 800053e:	0007c783          	lbu	a5,0(a5)
 8000542:	cf99                	beqz	a5,8000560 <_ZN5Uart07sendStrEPc+0x36>
        sendByte(*str);
 8000544:	fe842783          	lw	a5,-24(s0)
 8000548:	0007c783          	lbu	a5,0(a5)
 800054c:	85be                	mv	a1,a5
 800054e:	fec42503          	lw	a0,-20(s0)
 8000552:	3fbd                	jal	80004d0 <_ZN5Uart08sendByteEh>
        str++;
 8000554:	fe842783          	lw	a5,-24(s0)
 8000558:	0785                	addi	a5,a5,1
 800055a:	fef42423          	sw	a5,-24(s0)
    while(*str!='\0') {
 800055e:	bff1                	j	800053a <_ZN5Uart07sendStrEPc+0x10>
    }
}
 8000560:	0001                	nop
 8000562:	40f2                	lw	ra,28(sp)
 8000564:	4462                	lw	s0,24(sp)
 8000566:	6105                	addi	sp,sp,32
 8000568:	8082                	ret

0800056a <_ZN5Uart04initEv>:

void Uart0::init() {
 800056a:	1101                	addi	sp,sp,-32
 800056c:	ce06                	sw	ra,28(sp)
 800056e:	cc22                	sw	s0,24(sp)
 8000570:	1000                	addi	s0,sp,32
 8000572:	fea42623          	sw	a0,-20(s0)
    // Tx A9 Rx A10
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;       
 8000576:	400217b7          	lui	a5,0x40021
 800057a:	4f98                	lw	a4,24(a5)
 800057c:	400217b7          	lui	a5,0x40021
 8000580:	00576713          	ori	a4,a4,5
 8000584:	cf98                	sw	a4,24(a5)
    GPIOA->CRH = 0;
 8000586:	400117b7          	lui	a5,0x40011
 800058a:	80078793          	addi	a5,a5,-2048 # 40010800 <_ZN5Uart05pThisE+0x2000fffc>
 800058e:	0007a223          	sw	zero,4(a5)
    GPIOA->CRH |=  (1<<7) | (3<<4); //CTL9=1:0; MD9=1:1  AF push-pull max speed
 8000592:	400117b7          	lui	a5,0x40011
 8000596:	80078793          	addi	a5,a5,-2048 # 40010800 <_ZN5Uart05pThisE+0x2000fffc>
 800059a:	43d8                	lw	a4,4(a5)
 800059c:	400117b7          	lui	a5,0x40011
 80005a0:	80078793          	addi	a5,a5,-2048 # 40010800 <_ZN5Uart05pThisE+0x2000fffc>
 80005a4:	0b076713          	ori	a4,a4,176
 80005a8:	c3d8                	sw	a4,4(a5)
    GPIOA->CRH |=  (1<<10) | (0<<8); //CTL10=0:1; MD9=0:0  input floating (HiZ)
 80005aa:	400117b7          	lui	a5,0x40011
 80005ae:	80078793          	addi	a5,a5,-2048 # 40010800 <_ZN5Uart05pThisE+0x2000fffc>
 80005b2:	43d8                	lw	a4,4(a5)
 80005b4:	400117b7          	lui	a5,0x40011
 80005b8:	80078793          	addi	a5,a5,-2048 # 40010800 <_ZN5Uart05pThisE+0x2000fffc>
 80005bc:	40076713          	ori	a4,a4,1024
 80005c0:	c3d8                	sw	a4,4(a5)
    RCC->APB2ENR |= RCC_APB2ENR_USART0EN;
 80005c2:	400217b7          	lui	a5,0x40021
 80005c6:	4f94                	lw	a3,24(a5)
 80005c8:	400217b7          	lui	a5,0x40021
 80005cc:	6711                	lui	a4,0x4
 80005ce:	8f55                	or	a4,a4,a3
 80005d0:	cf98                	sw	a4,24(a5)
    USART0->BAUD = 0x341;//(8000000-4800)/9600 = 832,8 = 0x341
 80005d2:	400147b7          	lui	a5,0x40014
 80005d6:	80078793          	addi	a5,a5,-2048 # 40013800 <_ZN5Uart05pThisE+0x20012ffc>
 80005da:	34100713          	li	a4,833
 80005de:	c798                	sw	a4,8(a5)
    USART0->CTL0 |= (USART_CTL0_UEN | USART_CTL0_REN | USART_CTL0_TEN | USART_CTL0_RBNEIE);
 80005e0:	400147b7          	lui	a5,0x40014
 80005e4:	80078793          	addi	a5,a5,-2048 # 40013800 <_ZN5Uart05pThisE+0x20012ffc>
 80005e8:	47d4                	lw	a3,12(a5)
 80005ea:	400147b7          	lui	a5,0x40014
 80005ee:	80078793          	addi	a5,a5,-2048 # 40013800 <_ZN5Uart05pThisE+0x20012ffc>
 80005f2:	6709                	lui	a4,0x2
 80005f4:	02c70713          	addi	a4,a4,44 # 202c <__stack_size+0x182c>
 80005f8:	8f55                	or	a4,a4,a3
 80005fa:	c7d8                	sw	a4,12(a5)
    
    eclic_init();
 80005fc:	3d31                	jal	8000418 <_Z10eclic_initv>
    eclic_enable_interrupt(USART1_IRQn);
 80005fe:	03800513          	li	a0,56
 8000602:	35a9                	jal	800044c <_Z22eclic_enable_interruptm>
    eclic_set_intattr(USART1_IRQn, 1);
 8000604:	4585                	li	a1,1
 8000606:	03800513          	li	a0,56
 800060a:	35b5                	jal	8000476 <_Z17eclic_set_intattrmh>
    interruptEnable();
 800060c:	353d                	jal	800043a <_Z15interruptEnablev>
}
 800060e:	0001                	nop
 8000610:	40f2                	lw	ra,28(sp)
 8000612:	4462                	lw	s0,24(sp)
 8000614:	6105                	addi	sp,sp,32
 8000616:	8082                	ret

Disassembly of section .init:

08000618 <__init_array_start>:
 8000618:	03fe                	slli	t2,t2,0x1f
 800061a:	0800                	addi	s0,sp,16
