
build/startup.o:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_Z5_initv>:
extern void (*__fini_array_start []) (void) __attribute__((weak)); //from linker destructors
extern void (*__fini_array_end []) (void) __attribute__((weak)); //from linker	destructors
// dummy This section holds executable instructions that contribute to the process initialization code. When a program
// starts to run, the system arranges to execute the code in this section before calling the main program entry point
// (called main for C programs).
void __attribute__ ((weak)) _init(void)  {}
   0:	1141                	addi	sp,sp,-16
   2:	c622                	sw	s0,12(sp)
   4:	0800                	addi	s0,sp,16
   6:	0001                	nop
   8:	4432                	lw	s0,12(sp)
   a:	0141                	addi	sp,sp,16
   c:	8082                	ret

0000000e <_Z5_finiv>:
// dummy This section holds executable instructions that contribute to the process termination code. That is,
// when a program exits normally, the system arranges to execute the code in this section
void __attribute__ ((weak)) _fini(void)  {} 
   e:	1141                	addi	sp,sp,-16
  10:	c622                	sw	s0,12(sp)
  12:	0800                	addi	s0,sp,16
  14:	0001                	nop
  16:	4432                	lw	s0,12(sp)
  18:	0141                	addi	sp,sp,16
  1a:	8082                	ret

0000001c <__libc_init_array>:

/* Iterate over all the init routines.  */
// static initialization constructors function
extern "C" void __libc_init_array(void) {
  1c:	1101                	addi	sp,sp,-32
  1e:	ce06                	sw	ra,28(sp)
  20:	cc22                	sw	s0,24(sp)
  22:	1000                	addi	s0,sp,32
    int count;
    int i;
    count = __preinit_array_end - __preinit_array_start; // counts of preinit functions DK what it is
  24:	000007b7          	lui	a5,0x0
			24: R_RISCV_HI20	__preinit_array_end
			24: R_RISCV_RELAX	*ABS*
  28:	00078713          	mv	a4,a5
			28: R_RISCV_LO12_I	__preinit_array_end
			28: R_RISCV_RELAX	*ABS*
  2c:	000007b7          	lui	a5,0x0
			2c: R_RISCV_HI20	__preinit_array_start
			2c: R_RISCV_RELAX	*ABS*
  30:	00078793          	mv	a5,a5
			30: R_RISCV_LO12_I	__preinit_array_start
			30: R_RISCV_RELAX	*ABS*
  34:	40f707b3          	sub	a5,a4,a5
  38:	8789                	srai	a5,a5,0x2
  3a:	fef42423          	sw	a5,-24(s0)
    for (i = 0; i < count; i++)
  3e:	fe042623          	sw	zero,-20(s0)

00000042 <.L5>:
  42:	fec42703          	lw	a4,-20(s0)
  46:	fe842783          	lw	a5,-24(s0)
  4a:	02f75263          	bge	a4,a5,6e <.L4>
			4a: R_RISCV_BRANCH	.L4
        __preinit_array_start[i]();
  4e:	000007b7          	lui	a5,0x0
			4e: R_RISCV_HI20	__preinit_array_start
			4e: R_RISCV_RELAX	*ABS*
  52:	00078713          	mv	a4,a5
			52: R_RISCV_LO12_I	__preinit_array_start
			52: R_RISCV_RELAX	*ABS*
  56:	fec42783          	lw	a5,-20(s0)
  5a:	078a                	slli	a5,a5,0x2
  5c:	97ba                	add	a5,a5,a4
  5e:	439c                	lw	a5,0(a5)
  60:	9782                	jalr	a5
    for (i = 0; i < count; i++)
  62:	fec42783          	lw	a5,-20(s0)
  66:	0785                	addi	a5,a5,1
  68:	fef42623          	sw	a5,-20(s0)
  6c:	bfd9                	j	42 <.L5>
			6c: R_RISCV_RVC_JUMP	.L5

0000006e <.L4>:
    _init();
  6e:	00000097          	auipc	ra,0x0
			6e: R_RISCV_CALL	_Z5_initv
			6e: R_RISCV_RELAX	*ABS*
  72:	000080e7          	jalr	ra # 6e <.L4>
    count = __init_array_end - __init_array_start; // counts of init constructors
  76:	000007b7          	lui	a5,0x0
			76: R_RISCV_HI20	__init_array_end
			76: R_RISCV_RELAX	*ABS*
  7a:	00078713          	mv	a4,a5
			7a: R_RISCV_LO12_I	__init_array_end
			7a: R_RISCV_RELAX	*ABS*
  7e:	000007b7          	lui	a5,0x0
			7e: R_RISCV_HI20	__init_array_start
			7e: R_RISCV_RELAX	*ABS*
  82:	00078793          	mv	a5,a5
			82: R_RISCV_LO12_I	__init_array_start
			82: R_RISCV_RELAX	*ABS*
  86:	40f707b3          	sub	a5,a4,a5
  8a:	8789                	srai	a5,a5,0x2
  8c:	fef42423          	sw	a5,-24(s0)
    for (i = 0; i < count; i++)
  90:	fe042623          	sw	zero,-20(s0)

00000094 <.L7>:
  94:	fec42703          	lw	a4,-20(s0)
  98:	fe842783          	lw	a5,-24(s0)
  9c:	02f75263          	bge	a4,a5,c0 <.L8>
			9c: R_RISCV_BRANCH	.L8
        __init_array_start[i]();
  a0:	000007b7          	lui	a5,0x0
			a0: R_RISCV_HI20	__init_array_start
			a0: R_RISCV_RELAX	*ABS*
  a4:	00078713          	mv	a4,a5
			a4: R_RISCV_LO12_I	__init_array_start
			a4: R_RISCV_RELAX	*ABS*
  a8:	fec42783          	lw	a5,-20(s0)
  ac:	078a                	slli	a5,a5,0x2
  ae:	97ba                	add	a5,a5,a4
  b0:	439c                	lw	a5,0(a5)
  b2:	9782                	jalr	a5
    for (i = 0; i < count; i++)
  b4:	fec42783          	lw	a5,-20(s0)
  b8:	0785                	addi	a5,a5,1
  ba:	fef42623          	sw	a5,-20(s0)
  be:	bfd9                	j	94 <.L7>
			be: R_RISCV_RVC_JUMP	.L7

000000c0 <.L8>:
}
  c0:	0001                	nop
  c2:	40f2                	lw	ra,28(sp)
  c4:	4462                	lw	s0,24(sp)
  c6:	6105                	addi	sp,sp,32
  c8:	8082                	ret

000000ca <__libc_fini_array>:
/* Run all the cleanup routines.  */
//!< destructors not usefull in microcontrollers
extern "C" void __libc_fini_array(void) {
  ca:	1101                	addi	sp,sp,-32
  cc:	ce06                	sw	ra,28(sp)
  ce:	cc22                	sw	s0,24(sp)
  d0:	1000                	addi	s0,sp,32
    int count;
    int i;
    count = __fini_array_end - __fini_array_start;
  d2:	000007b7          	lui	a5,0x0
			d2: R_RISCV_HI20	__fini_array_end
			d2: R_RISCV_RELAX	*ABS*
  d6:	00078713          	mv	a4,a5
			d6: R_RISCV_LO12_I	__fini_array_end
			d6: R_RISCV_RELAX	*ABS*
  da:	000007b7          	lui	a5,0x0
			da: R_RISCV_HI20	__fini_array_start
			da: R_RISCV_RELAX	*ABS*
  de:	00078793          	mv	a5,a5
			de: R_RISCV_LO12_I	__fini_array_start
			de: R_RISCV_RELAX	*ABS*
  e2:	40f707b3          	sub	a5,a4,a5
  e6:	8789                	srai	a5,a5,0x2
  e8:	fef42423          	sw	a5,-24(s0)
    for (i = count; i > 0; i--)
  ec:	fe842783          	lw	a5,-24(s0)
  f0:	fef42623          	sw	a5,-20(s0)

000000f4 <.L11>:
  f4:	fec42783          	lw	a5,-20(s0)
  f8:	02f05363          	blez	a5,11e <.L10>
			f8: R_RISCV_BRANCH	.L10
        __fini_array_start[i - 1]();
  fc:	fec42783          	lw	a5,-20(s0)
 100:	17fd                	addi	a5,a5,-1
 102:	00000737          	lui	a4,0x0
			102: R_RISCV_HI20	__fini_array_start
			102: R_RISCV_RELAX	*ABS*
 106:	00070713          	mv	a4,a4
			106: R_RISCV_LO12_I	__fini_array_start
			106: R_RISCV_RELAX	*ABS*
 10a:	078a                	slli	a5,a5,0x2
 10c:	97ba                	add	a5,a5,a4
 10e:	439c                	lw	a5,0(a5)
 110:	9782                	jalr	a5
    for (i = count; i > 0; i--)
 112:	fec42783          	lw	a5,-20(s0)
 116:	17fd                	addi	a5,a5,-1
 118:	fef42623          	sw	a5,-20(s0)
 11c:	bfe1                	j	f4 <.L11>
			11c: R_RISCV_RVC_JUMP	.L11

0000011e <.L10>:
    _fini();
 11e:	00000097          	auipc	ra,0x0
			11e: R_RISCV_CALL	_Z5_finiv
			11e: R_RISCV_RELAX	*ABS*
 122:	000080e7          	jalr	ra # 11e <.L10>
}
 126:	0001                	nop
 128:	40f2                	lw	ra,28(sp)
 12a:	4462                	lw	s0,24(sp)
 12c:	6105                	addi	sp,sp,32
 12e:	8082                	ret

00000130 <Reset_Handler>:
extern void *_sidata, *_sdata, *_edata, *_sbss, *_ebss; //из линкер скрипта
extern "C" void __attribute__((naked,noreturn)) Reset_Handler() {
    // jump to 0x0800xxxx address field from 0x0000xxxx address field
    asm("la a0, 0x08000000 \n"
         "addi a0, a0, 0x28a \n"
         "jr a0");
 130:	08000537          	lui	a0,0x8000
 134:	28a50513          	addi	a0,a0,650 # 800028a <CSR_MTVT+0x7ffff83>
 138:	8502                	jr	a0
    // check if PC == 0x0800xxxx     
    asm("la s0, _estack \n" 
        "la s1, 0x20000800 \n"
        "bne s0, s1, Reset_Handler");
 13a:	00000417          	auipc	s0,0x0
			13a: R_RISCV_PCREL_HI20	_estack
			13a: R_RISCV_RELAX	*ABS*
 13e:	00040413          	mv	s0,s0
			13e: R_RISCV_PCREL_LO12_I	.L0 
			13e: R_RISCV_RELAX	*ABS*
 142:	200014b7          	lui	s1,0x20001
 146:	80048493          	addi	s1,s1,-2048 # 20000800 <CSR_MTVT+0x200004f9>
 14a:	fe9413e3          	bne	s0,s1,130 <Reset_Handler>
			14a: R_RISCV_BRANCH	Reset_Handler
    asm("mv sp, s1"); // set stack ptr
 14e:	8126                	mv	sp,s1
    asm("csrc 0x300, 8"); // disable interrupts
 150:	30047073          	csrci	mstatus,8
    /* Intial the mtvt*/
    asm(".equ CSR_MTVT,  0x307 \n   "
        //"la t0, Vectors-4 \n      "
        "lui t0, 0x08000 \n"
        "csrw CSR_MTVT, t0          ");
 154:	080002b7          	lui	t0,0x8000
 158:	30729073          	csrw	mtvt,t0
    __libc_init_array(); 
 15c:	00000097          	auipc	ra,0x0
			15c: R_RISCV_CALL	__libc_init_array
			15c: R_RISCV_RELAX	*ABS*
 160:	000080e7          	jalr	ra # 15c <Reset_Handler+0x2c>
    main();
 164:	00000097          	auipc	ra,0x0
			164: R_RISCV_CALL	main
			164: R_RISCV_RELAX	*ABS*
 168:	000080e7          	jalr	ra # 164 <Reset_Handler+0x34>
}
 16c:	0001                	nop

0000016e <Default_Handler>:
extern "C" void Default_Handler() {
 16e:	1141                	addi	sp,sp,-16
 170:	c622                	sw	s0,12(sp)
 172:	0800                	addi	s0,sp,16

00000174 <.L14>:
     while(1) {
 174:	a001                	j	174 <.L14>
			174: R_RISCV_RVC_JUMP	.L14
